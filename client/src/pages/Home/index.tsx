import { useEffect, useState } from 'react'

import { PageWrapper } from '@component/PageWrapper'
import { FormField } from '@component/FormField'
import { Loader } from '@component/Loader'
import { PostProps, Card } from '@component/Card'

import * as api from '@service/api/dalle'

import * as S from './styles'

export const Home = () => {
  const [isLoading, setLoading] = useState(false)
  const [allPosts, setAllPosts] = useState<PostProps[]>([])
  const [searchText, setSearchText] = useState('')
  const [searchedResults, setSearchedResults] = useState<PostProps[]>([])

  const handleGetPosts = () => {
    setLoading(true)

    api
      .getDalleImages()
      .then((res) => setAllPosts(res.data.reverse()))
      .catch((err) => alert(err))
      .finally(() => setLoading(false))
  }

  const handleSearchChange = (value: string) => {
    setSearchText(value)

    setTimeout(() => {
      const searchResult = allPosts?.filter(
        (item) =>
          item.name.toLowerCase().includes(searchText.toLowerCase()) ||
          item.prompt.toLowerCase().includes(searchText.toLowerCase()),
      )
      setSearchedResults(searchResult)
    }, 500)
  }

  useEffect(() => {
    handleGetPosts()
  }, [])

  return (
    <PageWrapper>
      <S.HomeTitle>The Community Showcase</S.HomeTitle>
      <S.HomeSubtitle>
        Browse through a collection of imaginate and visually stunning images generated by DALL-E AI
      </S.HomeSubtitle>

      <FormField
        labelName="Search posts"
        type="text"
        name="text"
        placeholder="Search something..."
        value={searchText}
        onChange={({ target }) => handleSearchChange(target.value)}
      />

      <S.PostsBox>
        {isLoading ? (
          <Loader />
        ) : (
          <>
            {searchText && (
              <S.SearchText>
                Showing results for <strong>{searchText}</strong>
              </S.SearchText>
            )}

            <S.Posts>
              {searchText ? (
                <>
                  {searchedResults.length > 0 ? (
                    searchedResults.map((post, index) => (
                      <Card
                        key={post._id}
                        position={index + 1}
                        _id={post._id}
                        name={post.name}
                        photo={post.photo}
                        prompt={post.prompt}
                      />
                    ))
                  ) : (
                    <S.NotFoundText>NO SEARCH RESULTS FOUND</S.NotFoundText>
                  )}
                </>
              ) : (
                <>
                  {allPosts.length > 0 ? (
                    allPosts.map((post, index) => (
                      <Card
                        key={post._id}
                        position={index + 1}
                        _id={post._id}
                        name={post.name}
                        photo={post.photo}
                        prompt={post.prompt}
                      />
                    ))
                  ) : (
                    <S.NotFoundText>NO POSTS FOUND</S.NotFoundText>
                  )}
                </>
              )}
            </S.Posts>
          </>
        )}
      </S.PostsBox>
    </PageWrapper>
  )
}
